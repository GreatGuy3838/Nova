"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.search = void 0;
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("./utils");
/**
 * Search for videos, channels, playlists, etc...
 */
const search = (terms, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    if (typeof terms !== "string")
        throw new Error(utils_1.constants.err.type("terms", "string", typeof terms));
    if (typeof options !== "object")
        throw new Error(utils_1.constants.err.type("options", "object", typeof options));
    options = utils_1.mergeObj({
        requestOptions: {
            headers: {
                "User-Agent": utils_1.constants.headers.userAgent,
            },
        },
    }, options);
    let url = utils_1.constants.urls.search.base(terms);
    if (options.filterType) {
        const expectedFilterType = Object.keys(utils_1.constants.urls.search.filters);
        if (typeof options.filterType !== "string")
            throw new Error(utils_1.constants.err.type("filterType", expectedFilterType.join(" | "), typeof options.filterType));
        if (!expectedFilterType.includes(options.filterType))
            throw new Error(utils_1.constants.err.type("filterType", expectedFilterType.join(" | "), options.filterType));
        url += utils_1.constants.urls.search.filters[options.filterType];
    }
    let res;
    try {
        res = (yield axios_1.default.get(url, Object.assign(Object.assign({}, options.requestOptions), { responseType: "text" }))).data;
    }
    catch (err) {
        throw new Error(`Failed to fetch site. (${err})`);
    }
    let contents;
    try {
        contents = (_a = JSON.parse(res.substring(res.lastIndexOf('"sectionListRenderer":{"contents":[{"itemSectionRenderer":') + 58, res.lastIndexOf('},{"continuationItemRenderer"')))) === null || _a === void 0 ? void 0 : _a.contents;
    }
    catch (err) {
        throw new Error(`Failed to parse contents from script tag. (${err})`);
    }
    const result = {
        videos: [],
        channels: [],
        playlists: [],
    };
    (_b = contents === null || contents === void 0 ? void 0 : contents.filter((x) => x.videoRenderer)) === null || _b === void 0 ? void 0 : _b.forEach(({ videoRenderer: x }) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
        const video = {
            title: (_b = (_a = x === null || x === void 0 ? void 0 : x.title) === null || _a === void 0 ? void 0 : _a.runs[0]) === null || _b === void 0 ? void 0 : _b.text,
            id: x === null || x === void 0 ? void 0 : x.videoId,
            url: utils_1.constants.urls.base +
                ((_e = (_d = (_c = x === null || x === void 0 ? void 0 : x.navigationEndpoint) === null || _c === void 0 ? void 0 : _c.commandMetadata) === null || _d === void 0 ? void 0 : _d.webCommandMetadata) === null || _e === void 0 ? void 0 : _e.url),
            channel: {
                name: (_g = (_f = x === null || x === void 0 ? void 0 : x.ownerText) === null || _f === void 0 ? void 0 : _f.runs[0]) === null || _g === void 0 ? void 0 : _g.text,
                id: (_l = (_k = (_j = (_h = x === null || x === void 0 ? void 0 : x.ownerText) === null || _h === void 0 ? void 0 : _h.runs[0]) === null || _j === void 0 ? void 0 : _j.navigationEndpoint) === null || _k === void 0 ? void 0 : _k.browseEndpoint) === null || _l === void 0 ? void 0 : _l.browseId,
                url: utils_1.constants.urls.base +
                    ((_r = (_q = (_p = (_o = (_m = x === null || x === void 0 ? void 0 : x.ownerText) === null || _m === void 0 ? void 0 : _m.runs[0]) === null || _o === void 0 ? void 0 : _o.navigationEndpoint) === null || _p === void 0 ? void 0 : _p.commandMetadata) === null || _q === void 0 ? void 0 : _q.webCommandMetadata) === null || _r === void 0 ? void 0 : _r.url),
            },
            duration: {
                text: (_s = x === null || x === void 0 ? void 0 : x.lengthText) === null || _s === void 0 ? void 0 : _s.simpleText,
                pretty: (_v = (_u = (_t = x === null || x === void 0 ? void 0 : x.lengthText) === null || _t === void 0 ? void 0 : _t.accessibility) === null || _u === void 0 ? void 0 : _u.accessibilityData) === null || _v === void 0 ? void 0 : _v.label,
            },
            published: {
                pretty: (_w = x === null || x === void 0 ? void 0 : x.publishedTimeText) === null || _w === void 0 ? void 0 : _w.simpleText,
            },
            views: {
                text: (_x = x === null || x === void 0 ? void 0 : x.viewCountText) === null || _x === void 0 ? void 0 : _x.simpleText,
                pretty: (_y = x === null || x === void 0 ? void 0 : x.shortViewCountText) === null || _y === void 0 ? void 0 : _y.simpleText,
                prettyLong: (_1 = (_0 = (_z = x === null || x === void 0 ? void 0 : x.shortViewCountText) === null || _z === void 0 ? void 0 : _z.accessibility) === null || _0 === void 0 ? void 0 : _0.accessibilityData) === null || _1 === void 0 ? void 0 : _1.label,
            },
            thumbnails: (_2 = x === null || x === void 0 ? void 0 : x.thumbnail) === null || _2 === void 0 ? void 0 : _2.thumbnails,
        };
        result.videos.push(video);
    });
    (_c = contents === null || contents === void 0 ? void 0 : contents.filter((x) => x === null || x === void 0 ? void 0 : x.channelRenderer)) === null || _c === void 0 ? void 0 : _c.forEach(({ channelRenderer: x }) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const channel = {
            name: (_a = x === null || x === void 0 ? void 0 : x.title) === null || _a === void 0 ? void 0 : _a.simpleText,
            id: x === null || x === void 0 ? void 0 : x.channelId,
            url: utils_1.constants.urls.base +
                ((_c = (_b = x === null || x === void 0 ? void 0 : x.navigationEndpoint) === null || _b === void 0 ? void 0 : _b.browseEndpoint) === null || _c === void 0 ? void 0 : _c.canonicalBaseUrl),
            subscribers: {
                text: (_f = (_e = (_d = x === null || x === void 0 ? void 0 : x.subscriberCountText) === null || _d === void 0 ? void 0 : _d.accessibility) === null || _e === void 0 ? void 0 : _e.accessibilityData) === null || _f === void 0 ? void 0 : _f.label,
                pretty: (_g = x === null || x === void 0 ? void 0 : x.subscriberCountText) === null || _g === void 0 ? void 0 : _g.simpleText,
            },
            videoCount: ((_j = (_h = x === null || x === void 0 ? void 0 : x.videoCountText) === null || _h === void 0 ? void 0 : _h.runs[0]) === null || _j === void 0 ? void 0 : _j.text) +
                ((_l = (_k = x === null || x === void 0 ? void 0 : x.videoCountText) === null || _k === void 0 ? void 0 : _k.runs[1]) === null || _l === void 0 ? void 0 : _l.text),
            icons: (_m = x === null || x === void 0 ? void 0 : x.thumbnail) === null || _m === void 0 ? void 0 : _m.thumbnails,
        };
        result.channels.push(channel);
    });
    (_d = contents === null || contents === void 0 ? void 0 : contents.filter((x) => x === null || x === void 0 ? void 0 : x.playlistRenderer)) === null || _d === void 0 ? void 0 : _d.forEach(({ playlistRenderer: x }) => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const playlist = {
            name: (_a = x === null || x === void 0 ? void 0 : x.title) === null || _a === void 0 ? void 0 : _a.simpleText,
            id: x === null || x === void 0 ? void 0 : x.playlistId,
            url: utils_1.constants.urls.base +
                ((_d = (_c = (_b = x === null || x === void 0 ? void 0 : x.navigationEndpoint) === null || _b === void 0 ? void 0 : _b.commandMetadata) === null || _c === void 0 ? void 0 : _c.webCommandMetadata) === null || _d === void 0 ? void 0 : _d.url),
            thumbnails: (_g = (_f = (_e = x === null || x === void 0 ? void 0 : x.thumbnailRenderer) === null || _e === void 0 ? void 0 : _e.playlistVideoThumbnailRenderer) === null || _f === void 0 ? void 0 : _f.thumbnail) === null || _g === void 0 ? void 0 : _g.thumbnails,
            videoCount: x === null || x === void 0 ? void 0 : x.videoCount,
            published: {
                pretty: (_h = x === null || x === void 0 ? void 0 : x.publishedTimeText) === null || _h === void 0 ? void 0 : _h.simpleText,
            },
        };
        result.playlists.push(playlist);
    });
    return result;
});
exports.search = search;
exports.default = exports.search;
