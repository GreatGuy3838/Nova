"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.playlistInfo = void 0;
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("./utils");
/**
 * Get full information about a YouTube playlist
 */
const playlistInfo = (url, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (typeof url !== "string")
        throw new Error(utils_1.constants.err.type("url", "string", typeof url));
    if (typeof options !== "object")
        throw new Error(utils_1.constants.err.type("options", "object", typeof options));
    options = utils_1.mergeObj({
        requestOptions: {
            headers: {
                "User-Agent": utils_1.constants.headers.userAgent,
            },
        },
    }, options);
    const id = utils_1.constants.urls.playlist.baseUrlRegex.test(url)
        ? ((_a = url.match(utils_1.constants.urls.playlist.getIdRegex)) === null || _a === void 0 ? void 0 : _a[2]) || url
        : url;
    if (!url.startsWith("http"))
        url = utils_1.constants.urls.playlist.base(id);
    let res;
    try {
        res = (yield axios_1.default.get(url, Object.assign(Object.assign({}, options.requestOptions), { responseType: "text" }))).data;
    }
    catch (err) {
        throw new Error(`Failed to fetch site. (${err})`);
    }
    const script = (_b = res.split("var ytInitialData = ")[1]) === null || _b === void 0 ? void 0 : _b.split(";</script>")[0];
    if (!script)
        throw new Error("Failed to parse data from script tag.");
    let contents;
    try {
        contents = JSON.parse(script.substring(script.lastIndexOf('"playlistVideoListRenderer":{"contents":') +
            40, script.lastIndexOf('],"playlistId"') + 1));
    }
    catch (err) {
        throw new Error(`Failed to parse contents from script tag. (${err})`);
    }
    let microformat;
    try {
        microformat = JSON.parse(script.substring(script.lastIndexOf('"microformat":') + 14, script.lastIndexOf(',"sidebar"')));
    }
    catch (err) {
        throw new Error(`Failed to parse contents from script tag. (${err})`);
    }
    const playlist = {
        title: (_c = microformat === null || microformat === void 0 ? void 0 : microformat.microformatDataRenderer) === null || _c === void 0 ? void 0 : _c.title,
        id,
        url: (_d = microformat === null || microformat === void 0 ? void 0 : microformat.microformatDataRenderer) === null || _d === void 0 ? void 0 : _d.urlCanonical,
        description: (_e = microformat === null || microformat === void 0 ? void 0 : microformat.microformatDataRenderer) === null || _e === void 0 ? void 0 : _e.description,
        videos: [],
        thumbnails: (_g = (_f = microformat === null || microformat === void 0 ? void 0 : microformat.microformatDataRenderer) === null || _f === void 0 ? void 0 : _f.thumbnail) === null || _g === void 0 ? void 0 : _g.thumbnails,
    };
    (_h = contents === null || contents === void 0 ? void 0 : contents.filter((x) => x === null || x === void 0 ? void 0 : x.playlistVideoRenderer)) === null || _h === void 0 ? void 0 : _h.forEach(({ playlistVideoRenderer: x }) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
        const video = {
            title: (_b = (_a = x === null || x === void 0 ? void 0 : x.title) === null || _a === void 0 ? void 0 : _a.runs[0]) === null || _b === void 0 ? void 0 : _b.text,
            id: x === null || x === void 0 ? void 0 : x.videoId,
            url: utils_1.constants.urls.base +
                ((_e = (_d = (_c = x === null || x === void 0 ? void 0 : x.navigationEndpoint) === null || _c === void 0 ? void 0 : _c.commandMetadata) === null || _d === void 0 ? void 0 : _d.webCommandMetadata) === null || _e === void 0 ? void 0 : _e.url),
            channel: {
                name: (_g = (_f = x === null || x === void 0 ? void 0 : x.shortBylineText) === null || _f === void 0 ? void 0 : _f.runs[0]) === null || _g === void 0 ? void 0 : _g.text,
                id: (_m = (_l = (_k = (_j = (_h = x === null || x === void 0 ? void 0 : x.shortBylineText) === null || _h === void 0 ? void 0 : _h.runs[0]) === null || _j === void 0 ? void 0 : _j.navigationEndpoint) === null || _k === void 0 ? void 0 : _k.commandMetadata) === null || _l === void 0 ? void 0 : _l.webCommandMetadata) === null || _m === void 0 ? void 0 : _m.url,
                url: utils_1.constants.urls.base +
                    ((_r = (_q = (_p = (_o = x === null || x === void 0 ? void 0 : x.shortBylineText) === null || _o === void 0 ? void 0 : _o.runs[0]) === null || _p === void 0 ? void 0 : _p.navigationEndpoint) === null || _q === void 0 ? void 0 : _q.browseEndpoint) === null || _r === void 0 ? void 0 : _r.browseId),
            },
            thumbnails: (_s = x === null || x === void 0 ? void 0 : x.thumbnail) === null || _s === void 0 ? void 0 : _s.thumbnails,
            duration: {
                pretty: (_t = x === null || x === void 0 ? void 0 : x.lengthText) === null || _t === void 0 ? void 0 : _t.simpleText,
                text: (_w = (_v = (_u = x === null || x === void 0 ? void 0 : x.lengthText) === null || _u === void 0 ? void 0 : _u.accessibility) === null || _v === void 0 ? void 0 : _v.accessibilityData) === null || _w === void 0 ? void 0 : _w.label,
                lengthSec: x === null || x === void 0 ? void 0 : x.lengthSeconds,
            },
        };
        playlist.videos.push(video);
    });
    return playlist;
});
exports.playlistInfo = playlistInfo;
exports.default = exports.playlistInfo;
